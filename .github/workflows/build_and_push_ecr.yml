name: Spring Boot CI Pipeline
# 워크플로우가 실행될 조건 설정
on:
  push:
    branches: [ "main" ]  # main 브랜치에 push될 때 실행
    
# 환경 변수 설정
env:
  AWS_REGION: ap-northeast-2                      # AWS 리전

# 작업 정의
jobs:
  build:
    runs-on: ubuntu-latest  # 실행 환경 지정
    steps:
      # 1. 코드 체크아웃 / repository에서 소스를 참조하는 과정
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # application-prod.yml 파일 생성
      - name: Create application-prod.yml
        run: |
          cat << EOF > ./src/main/resources/application-prod.yml
          temp:
            test:
              value: ${CURRENT_ENV}
          EOF
          

      # 3. AWS 자격 증명 설정 (IAM 엑세스 키 입력방식)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 4. Gradle 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 6. 테스트 실행
      - name: Run tests
        run: ./gradlew test
        
      # 7. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 8. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: github-actions-cicd-demo    # ECR 레포지토리 이름
          IMAGE_TAG: ${{ github.sha }}                # 커밋 해시를 태그로 사용
        run: |
          # Dockerfile이 있는 위치에서 이미지 빌드
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # ECR에 이미지 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # 9. Docker 빌드 캐시 설정
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 10. 테스트 결과 저장
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: build/reports/tests/
